int equal_slices(slice a, slice b) asm "SDEQ";

int perform_operation(int op, int a, int b) {
  switch(op) {
    case 1: return a + b;
    case 2: return a - b;
    case 3: return a * b;
    case 4: 
      if (b == 0) {
        throw_with_exit_code(2);
      }
      return a / b;
    default:
      throw_with_exit_code(1);
  }
}

;; testable
() recv_internal(slice in_msg_body) {
  int op = in_msg_body.load_int(32);
  int query_id = in_msg_body.load_uint(64);

  // check if operation is valid
  if (op < 1 || op > 4) {
    throw_with_exit_code(1);
  }

  // check if the number of operands is correct
  if (in_msg_body.slice_bits() < 96) {
    throw_with_exit_code(3);
  }

  int a = in_msg_body.load_uint(64);
  int b = in_msg_body.load_uint(64);

  // check if operands are non-negative
  if (a < 0 || b < 0) {
    throw_with_exit_code(4);
  }

  int result = perform_operation(op, a, b);

  // prepare response message
  var msg = begin_cell()
    .store_uint(0x10, 6)
    .store_slice(in_msg.src)
    .store_grams(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64)
    .store_uint(result, 64)
